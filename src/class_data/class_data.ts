export class ClassData {
    name: string
    path: string
    major: number
    minor: number
    lastModified: number
    accessFlags: number
    sourceFile: string
    implements: string[]
    extends: string
    inners: string[]
    references: string[]
    annotations: string[]
    fields: FieldData[]
    methods: MethodData[]

    constructor(path: string, lastModified: number) {
        this.path = path
        this.lastModified = lastModified
    }
}

/*
B	byte	signed byte
C	char	Unicode character code point in the Basic Multilingual Plane, encoded with UTF-16
D	double	double-precision floating-point value
F	float	single-precision floating-point value
I	int	integer
J	long	long integer
L ClassName ;	reference	an instance of class ClassName
S	short	signed short
Z	boolean	true or false
[	reference	one array dimension
V   void
*/

const ACC_PUBLIC = 0x0001 // Declared public; may be accessed from outside its package.
const ACC_PRIVATE = 0x0002 //Declared private; accessible only within the defining class.
const ACC_PROTECTED = 0x0004 //Declared protected; may be accessed within subclasses.
const ACC_STATIC = 0x0008 //Declared static.
const ACC_FINAL = 0x0010 //Declared final; must not be overridden (ยง5.4.5).
const ACC_SYNCHRONIZED = 0x0020 //Declared synchronized; invocation is wrapped by a monitor use.
const ACC_BRIDGE = 0x0040 //A bridge method, generated by the compiler.
const ACC_VARARGS = 0x0080 //Declared with variable number of arguments.
const ACC_NATIVE = 0x0100 //Declared native; implemented in a language other than Java.
const ACC_ABSTRACT = 0x0400 //Declared abstract; no implementation is provided.
const ACC_STRICT = 0x0800 //Declared strictfp; floating-point mode is FP-strict.
const ACC_SYNTHETIC = 0x1000 //Declared synthetic; not present in the source code.
const ACC_SUPER = 0x0020 //Treat superclass methods specially when invoked by the invokespecial instruction.
const ACC_INTERFACE = 0x0200 //Is an interface, not a class.
const ACC_ANNOTATION = 0x2000 //Declared as an annotation type.
const ACC_ENUM = 0x4000 //Declared as an enum type.

function isStatic(flag: number) : boolean { return (flag & ACC_STATIC) != 0}

export interface LineEntry {
    pc: number
    line: number
}

export class FieldData {
    name: string
    type: string
    isParam: boolean
    index: number
    line: number
    annotations: string[]
    accessFlags: number

    constructor(name: string, type: string, isParam: boolean, index: number, line: number, annotations: string[], accessFlags: number) {
        this.name = name
        this.type = type
        this.isParam = isParam
        this.index = index
        this.line = line
        this.annotations = annotations
        this.accessFlags = accessFlags
    }
}

export class MethodData {
    name: string
    type: string
    params: FieldData[]
    locals: FieldData[]
    annotations: string[]
    accessFlags: number

    constructor(name: string, type: string, allLocals: FieldData[], annotations: string[], accessFlags: number) {
        this.name = name
        this.type = type
        this.params = allLocals.filter(l => l.isParam)
        this.locals = allLocals.filter(l => !l.isParam)
        this.annotations = annotations
        this.accessFlags = accessFlags
    }

    extensionSignature() : string {
        let extensionMarker = this.params.find(p => p.name === `$this$${this.name}`)
        return extensionMarker ? extensionMarker.type : undefined
    }

    isMain() : boolean {
        return this.name === 'main' //TODO more
    }

    isInit() : boolean {
        return ['<init>', '<clinit>'].includes(this.name)
    }

    isStatic() : boolean { return isStatic(this.accessFlags) }

}